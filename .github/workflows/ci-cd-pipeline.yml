name: CI/CD Workflow for All Services

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  SI_CLUSTER: meditrack-cluster-1
  SI_ZONE: us-central1

jobs:
  build-and-deploy:
    name: Build and Deploy All Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - patient_service
          - appointment_service
          - notification_service
          - aggregation_service

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Install required dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin kubectl

      # Set up Google Cloud CLI
      - name: Setup Google Cloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Authenticate Docker with GKE
      - name: Configure Docker in GKE
        run: gcloud --quiet auth configure-docker

      # Get credentials for GKE cluster
      - name: Get GKE Credentials
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: "true"
        run: gcloud container clusters get-credentials "$SI_CLUSTER" --zone "$SI_ZONE"

      # Build Docker image for the service
      - name: Build Docker Image
        working-directory: ${{ matrix.service }}
        run: |
          docker build --tag "gcr.io/$PROJECT_ID/${{ matrix.service }}:prod" .

      # Push Docker image to Google Container Registry
      - name: Push Docker Image to GCR
        run: |
          docker push "gcr.io/$PROJECT_ID/${{ matrix.service }}:prod"

      # Deploy the service to the GKE cluster
      - name: Deploy to GKE
        working-directory: ${{ matrix.service }}
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: "true"
        run: |
          # Ensure deployment.yaml exists in the correct directory
          if [ -f deployment.yaml ]; then
            # Replace the image in the deployment file with the updated one (if needed)
            sed -i "s|image: gcr.io/.*:.*|image: gcr.io/$PROJECT_ID/${{ matrix.service }}:prod|g" deployment.yaml
            
            # Apply Kubernetes manifests (both deployment and service)
            kubectl apply -f deployment.yaml
            kubectl apply -f service.yaml
            
            # Restart the deployment
            kubectl rollout restart deployment patient-service
            
            # Verify deployed services
            kubectl get services -o wide
          else
            echo "deployment.yaml not found in ${{ matrix.service }} directory."
            exit 1
          fi
